version: '3.8'

services:
  db:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env.local
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        while ! nc -z db 5432; do
          sleep 1
        done &&
        echo 'Database is ready!' &&
        npx prisma db push &&
        echo 'Checking if database needs seeding...' &&
        if ! psql -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c 'SELECT EXISTS (SELECT 1 FROM "User" LIMIT 1);' | grep -q 't'; then
          echo 'Seeding database...' &&
          node db/seed.mjs
        else
          echo 'Database already seeded, skipping...'
        fi &&
        npm run dev
      "
    networks:
      - app-network

  socket:
    build:
      context: .
      dockerfile: Dockerfile.socket
    ports:
      - "3001:3001"
    environment:
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    depends_on:
      - app

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
